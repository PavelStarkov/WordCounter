//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WordCounter.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("WordCounter.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Try &quot;WordCounter -help&quot; for more information..
        /// </summary>
        internal static string ArgsParserErrorMessage {
            get {
                return ResourceManager.GetString("ArgsParserErrorMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to -cs [string message chunk size number] - Chunk size  of string messages, that goes to worker’s queue  in multithreaded run. Default value = 50. E.g. (wordcounter –i test.txt –w4 –cs 1000).
        /// </summary>
        internal static string ChunkSizeDescription {
            get {
                return ResourceManager.GetString("ChunkSizeDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to cs|ChunkSize=.
        /// </summary>
        internal static string ChunkSizeKey {
            get {
                return ResourceManager.GetString("ChunkSizeKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to -ds [[ht] [sl]] – data structure. For now, user could choose from two implementations: ht – HashTable and sl – SortedList. Default is HashTable. E.g. (wordcounter –i “test.txt” –ds ht ).
        /// </summary>
        internal static string DataStructureDescription {
            get {
                return ResourceManager.GetString("DataStructureDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ds|DataStructure=.
        /// </summary>
        internal static string DataStructureKey {
            get {
                return ResourceManager.GetString("DataStructureKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WordCounter console app – getting distinct list of words and counts the number of times they have occurred.
        ///List of options:
        ///-i  [[path to file] [“actual text”]] – input e.g.: (wordcounter –i “test.txt”; wordcounter –i “sample text”). Value should be in quotes   
        ///
        ///-ds [[ht] [sl]] – data structure. For now, user could choose from two implementations: ht – HashTable and sl – SortedList. Default is HashTable. E.g. (wordcounter –i “test.txt” –ds ht )
        ///
        ///-sa [[qs] [ds] [hs]] – sorting algorithm. To show resu [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string HelpDescription {
            get {
                return ResourceManager.GetString("HelpDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to h|help.
        /// </summary>
        internal static string HelpKey {
            get {
                return ResourceManager.GetString("HelpKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to -i  [[&quot;path to file&quot;] [“actual text”]] – input e.g.: (wordcounter –i “test.txt”; wordcounter –i “sample text”). Value should be in quotes..
        /// </summary>
        internal static string InputDescription {
            get {
                return ResourceManager.GetString("InputDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to i|&lt;|input=.
        /// </summary>
        internal static string InputKey {
            get {
                return ResourceManager.GetString("InputKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to -sa [[qs] [ds] [hs]] – sorting algorithm. To show result in ordered way, based on word occurrence. For now, user could choose from: qs – QuickSort, ds – Distribution Sort, hs – HybridSort (based on fast input data check, one of two above will be chosen) E.g. (wordcounter –i test.txt –sa qs).
        /// </summary>
        internal static string SortingAlgorithmDescription {
            get {
                return ResourceManager.GetString("SortingAlgorithmDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to sa|SortingAlgorithm=.
        /// </summary>
        internal static string SortingAlgorithmKey {
            get {
                return ResourceManager.GetString("SortingAlgorithmKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to -w [number of threads] – app allows run counting process in multithreaded way. Worker count option allows user to set up amount of parallel workers. E.g. (wordcounter –i test.txt –w 4) By default application is running in one main thread..
        /// </summary>
        internal static string WorkersCountDescription {
            get {
                return ResourceManager.GetString("WorkersCountDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to w|WorkersCount=.
        /// </summary>
        internal static string WorkersCountKey {
            get {
                return ResourceManager.GetString("WorkersCountKey", resourceCulture);
            }
        }
    }
}
